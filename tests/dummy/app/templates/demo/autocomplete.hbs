{{page-toolbar pageTitle="Autocomplete" isDemo=true}}

{{#doc-content}}

  {{#paper-card}}
  {{#paper-card-content}}
    <h2>Basic Usage</h2>
    <blockquote>Use <code>\{{paper-autocomplete}}</code> to search for matches from local or remote data sources.</blockquote>

    {{! BEGIN-SNIPPET autocomplete.basic-usage }}
    {{#paper-autocomplete
      disabled=firstDisabled
      onCreate=(action "addCountry")
      options=items
      allowClear=true
      defaultHighlighted=(if enableDefaultHighlighted highlightFirstMatch)
      searchText=(readonly countrySearchText)
      onSearchTextChange=(action (mut countrySearchText))
      selected=selectedCountry
      search=(if simulateQuery (action "searchCountries"))
      searchField="name"
      labelPath="name"
      placeholder="Select a Country..."
      loadingMessage="Searching countries..."
      noMatchesMessage="Oops this country doesn't exist. Create a new country?"
      onSelectionChange=(action (mut selectedCountry)) as |country autocomplete|}}
      {{paper-autocomplete-highlight
        label=country.name
        searchText=autocomplete.searchText
        flags="i"}}
    {{/paper-autocomplete}}
    {{! END-SNIPPET }}

    <p>
      {{#if selectedCountry}}
        Selected country is {{selectedCountry.name}} ({{selectedCountry.code}})
      {{else}}
          Nothing selected...
      {{/if}}
    </p>
    {{#paper-checkbox
      value=firstDisabled
      onChange=(action (mut firstDisabled))}}
      Disable input
    {{/paper-checkbox}}
    {{#paper-checkbox
      value=simulateQuery
      onChange=(action (mut simulateQuery))}}
      Simulate query
    {{/paper-checkbox}}
    {{#paper-checkbox
      value=enableDefaultHighlighted
      onChange=(action (mut enableDefaultHighlighted))}}
      Highlight first match
    {{/paper-checkbox}}
    {{paper-button
      primary=true
      label="Reset search-Text"
      onClick=(action (mut countrySearchText) '')}}
    {{paper-button
      primary=true
      label="Reset selected"
      onClick=(action (mut selectedCountry) null)}}

    <h3>Template</h3>
    {{code-snippet name="autocomplete.basic-usage.hbs"}}

  {{/paper-card-content}}
  {{/paper-card}}

  {{#paper-card}}
  {{#paper-card-content}}
    <h2>Block Custom template</h2>
    <blockquote>Use <code>\{{paper-autocomplete}}</code> with custom templates to show styled autocomplete results.</blockquote>

    {{!-- searchText=(readonly templateSeachText) --}}

    {{! BEGIN-SNIPPET autocomplete.block-custom-template }}
    {{#paper-autocomplete
      placeholder="Type e.g. ember, paper, one, two etc."
      options=arrayOfItems
      selected=selectedItem
      onSelectionChange=(action (mut selectedItem))
      as |item term|}}
      <span class="item-title">
        {{paper-icon "star"}}
        <span>
          {{paper-autocomplete-highlight searchText=term.searchText flags="i" label=item}}
        </span>
      </span>
      {{else}}
      Whoops! could not find!
    {{/paper-autocomplete}}
    {{! END-SNIPPET }}

    <p>
      Selected: {{if selectedItem selectedItem "None"}}
    </p>

    <h3>Template</h3>
    {{code-snippet name="autocomplete.block-custom-template.hbs"}}
  {{/paper-card-content}}
  {{/paper-card}}

  {{#paper-card}}
  {{#paper-card-content}}
    <h2>Floating Label</h2>
    <blockquote>The following example demonstrates floating labels being used as a normal form element.</blockquote>
    <div class="layout-row">
      {{! BEGIN-SNIPPET autocomplete.floating-label }}
      {{paper-input label="Name" value=name onChange=(action (mut name)) class="flex"}}
        {{#paper-autocomplete
          disabled=(readonly disabled2)
          required=(readonly isRequired)
          triggerClass="flex"
          options=items
          selected=selectedCountry2
          search=(if simulateQuery2 (action "searchCountries"))
          searchField="name"
          labelPath="name"
          label="Select a Country..."
          allowClear=(readonly allowClearWithLabel)
          loadingMessage="Searching countries..."
          noMatchesMessage="Oops this country doesn't exist."
          onSelectionChange=(action (mut selectedCountry2)) as |country select|}}
          {{paper-autocomplete-highlight
            label=country.name
            searchText=select.searchText
            flags="i"}}
      {{/paper-autocomplete}}

      {{! END-SNIPPET }}
    </div>
    <p>
      {{#if selectedCountry2}}
        Selected country is {{selectedCountry2.name}} ({{selectedCountry2.code}})
      {{else}}
        Nothing is selected.
      {{/if}}
    </p>
    {{#paper-checkbox
      value=(readonly disabled2)
      onChange=(action (mut disabled2))}}
      Disable input
    {{/paper-checkbox}}
    {{#paper-checkbox
      value=(readonly simulateQuery2)
      onChange=(action (mut simulateQuery2))}}
      Simulate query
    {{/paper-checkbox}}
    {{#paper-checkbox
      value=isRequired
      onChange=(action (mut isRequired))}}
      Is required
    {{/paper-checkbox}}
    {{#paper-checkbox
      value=(readonly allowClearWithLabel)
      onChange=(action (mut allowClearWithLabel))}}
      Allow Clear
    {{/paper-checkbox}}

    <h3>Template</h3>
    {{code-snippet name="autocomplete.floating-label.hbs"}}

  {{/paper-card-content}}
  {{/paper-card}}

{{/doc-content}}
